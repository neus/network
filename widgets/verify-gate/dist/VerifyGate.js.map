{
  "version": 3,
  "sources": ["../VerifyGate.jsx"],
  "sourcesContent": ["\"use client\";\n/**\n * NEUS VerifyGate Widget\n * React component for gated content verification\n * @license Apache-2.0\n */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { NeusClient } from '@neus/sdk';\n\n// Brand image served from IPFS with gateway failover\nconst BRAND_CID = 'bafkreiefbrffecrifnzcn3hfksklw3vospkf244c5ijkizxtzbsm2vtnga';\nconst BRAND_IPFS_GATEWAYS = [\n  'https://ipfs.neus.network/ipfs/',\n  'https://cloudflare-ipfs.com/ipfs/',\n  'https://ipfs.io/ipfs/'\n];\n\nconst NeusLogo = ({ size = 14 }) => {\n  const [gatewayIndex, setGatewayIndex] = useState(0);\n  const src = `${BRAND_IPFS_GATEWAYS[gatewayIndex]}${BRAND_CID}`;\n  return (\n    <img\n      src={src}\n      alt=\"NEUS\"\n      width={size}\n      height={size}\n      loading=\"eager\"\n      decoding=\"async\"\n      referrerPolicy=\"no-referrer\"\n      onError={() => setGatewayIndex((i) => (i + 1) % BRAND_IPFS_GATEWAYS.length)}\n      style={{ height: size, width: size, marginRight: 8, verticalAlign: 'middle' }}\n    />\n  );\n};\n\nexport function VerifyGate({\n  requiredVerifiers = ['ownership-basic'], // Array of verifier IDs\n  onVerified,\n  apiUrl,\n  style,\n  children,\n  // Advanced options for power users\n  verifierOptions,\n  verifierData,\n  showBrand = true,\n  disabled = false,\n  // Private proof access mode\n  mode = 'create', // 'create' or 'access'\n  qHash = null // Required when mode='access'\n}) {\n  const [state, setState] = useState('idle');\n  const [error, setError] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const client = useMemo(() => new NeusClient({ apiUrl }), [apiUrl]);\n\n  // Support multi-verifier requests\n  const verifierList = useMemo(() => {\n    return Array.isArray(requiredVerifiers) && requiredVerifiers.length > 0 \n      ? requiredVerifiers \n      : ['ownership-basic'];\n  }, [requiredVerifiers]);\n\n  const primaryVerifier = verifierList[0];\n\n  const handleClick = useCallback(async () => {\n    if (disabled || isProcessing) return;\n    \n    setError(null);\n    setIsProcessing(true);\n    setState('signing');\n\n    try {\n      if (mode === 'access') {\n        // Private proof access mode - requires wallet signature\n        if (!qHash) {\n          throw new Error('qHash is required for access mode');\n        }\n        \n        setState('verifying');\n        \n        // Use SDK's private access method with wallet signature\n        const privateData = await client.getPrivateStatus(qHash);\n        \n        setState('verified');\n        \n        // Callback with private data\n        onVerified?.({\n          qHash,\n          data: privateData.data,\n          mode: 'access',\n          statusUrl: privateData.statusUrl\n        });\n        \n      } else {\n        // Original verification creation mode\n        setState('verifying');\n        \n        // Handle multi-verifier requests\n        let verificationData;\n        if (verifierList.length === 1) {\n          // Single verifier - prefer explicit verifierData override, else simple defaults\n          const explicit = verifierData && verifierData[primaryVerifier];\n          if (explicit && typeof explicit === 'object') {\n            verificationData = explicit;\n          } else if (primaryVerifier === 'ownership-basic') {\n            verificationData = { content: `NEUS verification with ${primaryVerifier}` };\n          } else {\n            verificationData = verifierOptions || {};\n          }\n        } else {\n          // Multi-verifier - namespaced data structure\n          verificationData = {};\n          verifierList.forEach(verifierId => {\n            const explicit = verifierData && verifierData[verifierId];\n            if (explicit && typeof explicit === 'object') {\n              verificationData[verifierId] = explicit;\n            } else if (verifierId === 'ownership-basic') {\n              verificationData[verifierId] = { content: `NEUS verification with ${verifierId}` };\n            } else {\n              // Fallback to shared verifierOptions object if provided\n              verificationData[verifierId] = verifierOptions || {};\n            }\n          });\n        }\n        \n        const res = await client.verify({\n          verifierIds: verifierList,\n          data: verificationData,\n          options: {\n            privacyLevel: 'private', // Secure by default\n            publicDisplay: false,\n            storeOriginalContent: false,\n            ...(verifierOptions && { verifierOptions })\n          }\n        });\n\n        // Poll for completion  \n        const final = await client.pollProofStatus(res.qHash || res?.data?.qHash, { \n          interval: 3000, \n          timeout: 60000 \n        });\n\n        setState('verified');\n        \n        // Extract transaction hash for callback\n        const hubTx = final?.data?.hubTransaction || {};\n        const crosschain = final?.data?.crosschain || {};\n        const txHash = hubTx?.txHash || crosschain?.hubTxHash || null;\n        \n        // Check if all required verifiers passed\n        const verifiedVerifiers = final?.data?.verifiedVerifiers || [];\n        const allVerified = verifierList.every(verifierId => \n          verifiedVerifiers.find(v => v.verifierId === verifierId)?.verified === true\n        );\n\n        if (allVerified) {\n          onVerified?.({\n            qHash: final.qHash,\n            address: final?.data?.walletAddress,\n            txHash,\n            verifierIds: verifierList,\n            verifiedVerifiers,\n            statusUrl: final?.statusUrl\n          });\n        } else {\n          throw new Error('Not all required verifiers passed');\n        }\n      }\n\n    } catch (error) {\n      setError(error?.message || (mode === 'access' ? 'Access failed' : 'Verification failed'));\n      setState('error');\n    } finally {\n      setIsProcessing(false);\n    }\n  }, [disabled, isProcessing, mode, qHash, verifierList, client, verifierOptions, verifierData, onVerified, primaryVerifier]);\n\n  // Widget state labels\n  const labels = mode === 'access' ? {\n    idle: 'Sign to view',\n    signing: 'Waiting for signature...',\n    verifying: 'Accessing...',\n    verified: 'Access granted \u2713',\n    error: 'Retry'\n  } : {\n    idle: 'Verify with NEUS',\n    signing: 'Waiting for signature...',\n    verifying: 'Verifying...',\n    verified: 'Verified \u2713',\n    error: 'Retry'\n  };\n\n  // If children provided, render as gate wrapper\n  if (children) {\n    // Show children only when verified\n    if (state === 'verified') {\n      return <>{children}</>;\n    }\n    \n    // Show verification button when not verified\n    return (\n      <div style={{ textAlign: 'center', padding: '20px', ...style }}>\n        <button \n          onClick={handleClick} \n          disabled={disabled || isProcessing}\n          style={{\n            padding: '12px 24px',\n            borderRadius: '8px',\n            border: '1px solid #ccc',\n            background: state === 'verified' ? '#4caf50' : '#fff',\n            color: state === 'verified' ? '#fff' : '#333',\n            cursor: disabled || isProcessing ? 'not-allowed' : 'pointer'\n          }}\n        >\n          {showBrand && <NeusLogo size={14} />}\n          <span>{labels[state]}</span>\n        </button>\n        {error && (\n          <div style={{ color: 'red', marginTop: '8px', fontSize: '14px' }}>\n            {error}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // Render as standalone button\n  return (\n    <button \n      onClick={handleClick} \n      style={style} \n      disabled={disabled || isProcessing}\n    >\n      {showBrand && <NeusLogo size={14} />}\n      <span>{labels[state]}</span>\n      {error && ` \u2014 ${error}`}\n    </button>\n  );\n}\n"],
  "mappings": "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",
  "names": ["error"]
}
